//Implement a function that returns the kth smallest element in a given array
use std::cmp::Ordering;

fn kth_smallest(arr: &[i32], k: usize) -> i32 {
    let len = arr.len();
    if k > len {
        panic!("k is greater than the size of the array");
    }

    let mut arr = arr.into_iter().copied().collect::<Vec<i32>>();

    let mut kth = arr[k - 1];
    let mut l = 0;
    let mut r = len - 1;

    while l < r {
        if arr[l] == arr[r] {
            if l + 1 == r {
                break;
            }
            if arr[r] < kth {
                l += 1;
                continue;
            }
        }

        if arr[l] < kth && arr[r] >= kth {
            let tmp = arr[l];
            arr[l] = arr[r];
            arr[r] = tmp;
            kth = (kth + arr[l]) / 2;
            l += 1;
            r -= 1;
        } else if arr[l] < kth {
            l += 1;
        } else {
            r -= 1;
        }
    }

    kth
}

fn main() {
    let arr = vec![3, 5, 2, 1, 6, 4, 7];
    let k = 4;
    let result = kth_smallest(&arr, k);
    println!("The kth smallest element is: {}", result);
}
